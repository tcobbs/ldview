# LDViewThumbs/CMakeLists.txt

set(LDVIEWTHUMBS_SOURCES
    LDViewThumbExtractor.cpp
    LDViewThumbs.cpp
    StdAfx.cpp # For Precompiled Header
    # TCFoundation sources will be linked via ldview_tcfoundation_lib
    # Midl generated files (LDViewThumbs_i.c, LDViewThumbs_p.c, dlldata.c)
    # should be added here if generated by a custom MIDL command configured in this CMakeLists.txt
    # For now, assuming they might be pre-generated or handled by IDE if IDL is listed as source.
)

set(LDVIEWTHUMBS_HEADERS
    LDViewThumbExtractor.h
    Resource.h # Specific to LDViewThumbs
    StdAfx.h
    # dlldatax.h # Generated by MIDL, not a primary source header
    # LDViewThumbs.h # Generated by MIDL
)

# Module definition files
set(LDVIEWTHUMBS_DEF_WIN32 ${CMAKE_CURRENT_SOURCE_DIR}/LDViewThumbs.def)
set(LDVIEWTHUMBS_DEF_X64 ${CMAKE_CURRENT_SOURCE_DIR}/LDViewThumbs64.def)

add_library(ldview_thumbs_dll SHARED
    ${LDVIEWTHUMBS_SOURCES}
    LDViewThumbs.idl # Added as source for potential MIDL processing by CMake/VS
    LDViewThumbs.rc  # Added as source for resource compilation
)

# Set target name for x64 (matches vcxproj)
if(CMAKE_SIZEOF_VOID_P EQUAL 8)
    set_target_properties(ldview_thumbs_dll PROPERTIES OUTPUT_NAME "LDViewThumbs64")
else()
    set_target_properties(ldview_thumbs_dll PROPERTIES OUTPUT_NAME "LDViewThumbs")
endif()

target_precompile_headers(ldview_thumbs_dll PRIVATE StdAfx.h)

target_compile_definitions(ldview_thumbs_dll PRIVATE
    USE_CPP11
    _WINDOWS
    _USRDLL
    _TC_STATIC # TCFoundation is used as a static lib
    NO_PNG_IMAGE_FORMAT # Specific to LDViewThumbs
    NO_JPG_IMAGE_FORMAT # Specific to LDViewThumbs
    $<$<CONFIG:Debug>:_DEBUG>
    $<$<CONFIG:Release>:NDEBUG>
    # _AFXDLL will be handled by CMAKE_MFC_FLAG in root or if specific target property is set.
    # For now, let's add it directly as per vcxproj, but this might need adjustment.
    _AFXDLL
    UNICODE             # Added
    _UNICODE            # Added
    _ATL_APARTMENT_THREADED # Added
    _AFXEXT             # Added
)

if(MSVC)
    # No specific WIN32 needed if covered by _WINDOWS, but vcxproj has it.
    target_compile_definitions(ldview_thumbs_dll PRIVATE WIN32)
    # The vcxproj uses /GR- (No RTTI) for Release builds.
    target_compile_options(ldview_thumbs_dll PRIVATE $<$<CONFIG:Release>:/GR->)
else()
    message(FATAL_ERROR "LDViewThumbs is specific to Windows MSVC and likely uses ATL/MFC.")
endif()

target_include_directories(ldview_thumbs_dll PRIVATE
    "${CMAKE_CURRENT_SOURCE_DIR}" # For its own headers (StdAfx.h, Resource.h)
    "${CMAKE_SOURCE_DIR}"         # For "TCFoundation/..."
    # Include directory for MIDL generated headers (e.g. LDViewThumbs.h)
    # If MIDL output is to CMAKE_CURRENT_BINARY_DIR
    "${CMAKE_CURRENT_BINARY_DIR}"
)

# Link TCFoundation (which should provide the necessary TC* objects)
target_link_libraries(ldview_thumbs_dll PRIVATE
    ldview_tcfoundation_lib
    gdi32 # From vcxproj
    # Standard Windows libs often needed for DLLs/COM/ShellExtensions
    ole32
    oleaut32
    uuid
    advapi32
    shell32
)

# Set module definition file
if(CMAKE_SIZEOF_VOID_P EQUAL 8) # 64-bit
    set_target_properties(ldview_thumbs_dll PROPERTIES LINK_FLAGS "/DEF:\"${LDVIEWTHUMBS_DEF_X64}\"")
else() # 32-bit
    set_target_properties(ldview_thumbs_dll PROPERTIES LINK_FLAGS "/DEF:\"${LDVIEWTHUMBS_DEF_WIN32}\"")
endif()

# Note on MIDL and generated sources:
# CMake can automatically handle IDL files if they are listed as sources to add_library
# when using Visual Studio generators. It should invoke MIDL and compile the outputs.
# The generated files (LDViewThumbs.h, LDViewThumbs_i.c, LDViewThumbs_p.c, dlldata.c)
# would be placed in CMAKE_CURRENT_BINARY_DIR.
# CMAKE_CURRENT_BINARY_DIR should be an include path for LDViewThumbs.h.
# The .c files are automatically compiled. This is simpler than add_custom_command.

message(STATUS "Configuring LDViewThumbs DLL target: ldview_thumbs_dll")
